@page "/QuanTriDialog/{id}"
﻿@using System.Net.Http.Json
@using MudBlazor.Extensions
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@*@using Examples.Data.Models*@
@inject HttpClient httpClient
@inject NavigationManager navigation
@inject ISnackbar Snackbar

<h3>@Tieude</h3>
<EditForm Model="@quantri" OnValidSubmit="@SubmitForm">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="@quantri.Maquantri" Label="Mã quản trị" Disabled="true" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="@quantri.Hoten" Label="Họ tên" />
            <ValidationMessage For="@(()  => quantri.Hoten)" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="@quantri.Taikhoan" Label="Tài Khoản" />
            <ValidationMessage For="@(()  => quantri.Taikhoan)" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="@quantri.Matkhau" Label="Mật khẩu" @ref="pwField1" InputType="InputType.Password" Disabled="@flag" />
            <ValidationMessage For="@(()  => quantri.Matkhau)" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField T="string" Label="Nhập lại mật khẩu" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))" Disabled="@flag" />
        </MudItem>
    </MudGrid>
    <div class="mt-3 ml-0 d-flex">
        <div class="d-flex ml-auto align-center">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Color="Color.Info" Class="m-2">Save</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Primary" Class="m-2" Link="/QuanTriList">Hủy</MudButton>           
        </div>
    </div>
</EditForm>
@code{    
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    //MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    

    private void Reset()
    {
        quantri = new QuanTri
        {
            Maquantri = 0,
            Hoten = null,
            Taikhoan = null,
            Matkhau = null,
        };
        StateHasChanged();
    }
}